//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace xPlannerData.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class audaxwareDB : DbContext
    {
        public audaxwareDB()
            : base("name=audaxwareDB")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<box> boxes { get; set; }
        public virtual DbSet<cad_domain> cad_domain { get; set; }
        public virtual DbSet<client> clients { get; set; }
        public virtual DbSet<cost_center> cost_center { get; set; }
        public virtual DbSet<department_type> department_type { get; set; }
        public virtual DbSet<equip_load> equip_load { get; set; }
        public virtual DbSet<equipment> equipments { get; set; }
        public virtual DbSet<equipment_box> equipment_box { get; set; }
        public virtual DbSet<equipment_category> equipment_category { get; set; }
        public virtual DbSet<equipment_codes> equipment_codes { get; set; }
        public virtual DbSet<equipment_colors> equipment_colors { get; set; }
        public virtual DbSet<equipment_drawing> equipment_drawing { get; set; }
        public virtual DbSet<equipment_measurement> equipment_measurement { get; set; }
        public virtual DbSet<equipment_options> equipment_options { get; set; }
        public virtual DbSet<equipment_subcategory> equipment_subcategory { get; set; }
        public virtual DbSet<facility> facilities { get; set; }
        public virtual DbSet<global_contact> global_contact { get; set; }
        public virtual DbSet<inventory_purchase_order> inventory_purchase_order { get; set; }
        public virtual DbSet<inventory_tab_display_prefs> inventory_tab_display_prefs { get; set; }
        public virtual DbSet<manufacturer> manufacturers { get; set; }
        public virtual DbSet<manufacturer_contact> manufacturer_contact { get; set; }
        public virtual DbSet<project> projects { get; set; }
        public virtual DbSet<project_department> project_department { get; set; }
        public virtual DbSet<project_equipment> project_equipment { get; set; }
        public virtual DbSet<project_phase> project_phase { get; set; }
        public virtual DbSet<project_room> project_room { get; set; }
        public virtual DbSet<project_room_inventory> project_room_inventory { get; set; }
        public virtual DbSet<project_room_relo_inventory> project_room_relo_inventory { get; set; }
        public virtual DbSet<purchase_order> purchase_order { get; set; }
        public virtual DbSet<relo_equipment> relo_equipment { get; set; }
        public virtual DbSet<role_pages> role_pages { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<template_boxes> template_boxes { get; set; }
        public virtual DbSet<template_department> template_department { get; set; }
        public virtual DbSet<template_equipment_box> template_equipment_box { get; set; }
        public virtual DbSet<template_room> template_room { get; set; }
        public virtual DbSet<template_room_inventory> template_room_inventory { get; set; }
        public virtual DbSet<users_track> users_track { get; set; }
        public virtual DbSet<vendor> vendors { get; set; }
        public virtual DbSet<vendor_contact> vendor_contact { get; set; }
        public virtual DbSet<vendor_equipment> vendor_equipment { get; set; }
        public virtual DbSet<ancillary_v> ancillary_v { get; set; }
        public virtual DbSet<equipment_by_room> equipment_by_room { get; set; }
        public virtual DbSet<inventory_po_qty_v> inventory_po_qty_v { get; set; }
        public virtual DbSet<item_status_v> item_status_v { get; set; }
        public virtual DbSet<matching_values> matching_values { get; set; }
        public virtual DbSet<inventory_w_relo_v> inventory_w_relo_v { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<domain> domains { get; set; }
    
        public virtual int change_department_phase(Nullable<int> project_id, Nullable<int> old_phase_id, Nullable<int> department_id, Nullable<int> new_phase_id)
        {
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("project_id", project_id) :
                new ObjectParameter("project_id", typeof(int));
    
            var old_phase_idParameter = old_phase_id.HasValue ?
                new ObjectParameter("old_phase_id", old_phase_id) :
                new ObjectParameter("old_phase_id", typeof(int));
    
            var department_idParameter = department_id.HasValue ?
                new ObjectParameter("department_id", department_id) :
                new ObjectParameter("department_id", typeof(int));
    
            var new_phase_idParameter = new_phase_id.HasValue ?
                new ObjectParameter("new_phase_id", new_phase_id) :
                new ObjectParameter("new_phase_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("change_department_phase", project_idParameter, old_phase_idParameter, department_idParameter, new_phase_idParameter);
        }
    
        public virtual ObjectResult<equipment_inventory_Result> equipment_inventory(string dOMAIN_ID, Nullable<int> pROJECT_ID, Nullable<int> pHASE_ID, Nullable<int> dEPARTMENT_ID, Nullable<int> rOOM_ID)
        {
            var dOMAIN_IDParameter = dOMAIN_ID != null ?
                new ObjectParameter("DOMAIN_ID", dOMAIN_ID) :
                new ObjectParameter("DOMAIN_ID", typeof(string));
    
            var pROJECT_IDParameter = pROJECT_ID.HasValue ?
                new ObjectParameter("PROJECT_ID", pROJECT_ID) :
                new ObjectParameter("PROJECT_ID", typeof(int));
    
            var pHASE_IDParameter = pHASE_ID.HasValue ?
                new ObjectParameter("PHASE_ID", pHASE_ID) :
                new ObjectParameter("PHASE_ID", typeof(int));
    
            var dEPARTMENT_IDParameter = dEPARTMENT_ID.HasValue ?
                new ObjectParameter("DEPARTMENT_ID", dEPARTMENT_ID) :
                new ObjectParameter("DEPARTMENT_ID", typeof(int));
    
            var rOOM_IDParameter = rOOM_ID.HasValue ?
                new ObjectParameter("ROOM_ID", rOOM_ID) :
                new ObjectParameter("ROOM_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<equipment_inventory_Result>("equipment_inventory", dOMAIN_IDParameter, pROJECT_IDParameter, pHASE_IDParameter, dEPARTMENT_IDParameter, rOOM_IDParameter);
        }
    
        public virtual ObjectResult<check_room_equipment_Result> check_room_equipment(Nullable<int> pROJECT_ID, string eQUIPMENT_IDS, Nullable<int> pHASE_ID, Nullable<int> dEPARTMENT_ID, Nullable<int> rOOM_ID)
        {
            var pROJECT_IDParameter = pROJECT_ID.HasValue ?
                new ObjectParameter("PROJECT_ID", pROJECT_ID) :
                new ObjectParameter("PROJECT_ID", typeof(int));
    
            var eQUIPMENT_IDSParameter = eQUIPMENT_IDS != null ?
                new ObjectParameter("EQUIPMENT_IDS", eQUIPMENT_IDS) :
                new ObjectParameter("EQUIPMENT_IDS", typeof(string));
    
            var pHASE_IDParameter = pHASE_ID.HasValue ?
                new ObjectParameter("PHASE_ID", pHASE_ID) :
                new ObjectParameter("PHASE_ID", typeof(int));
    
            var dEPARTMENT_IDParameter = dEPARTMENT_ID.HasValue ?
                new ObjectParameter("DEPARTMENT_ID", dEPARTMENT_ID) :
                new ObjectParameter("DEPARTMENT_ID", typeof(int));
    
            var rOOM_IDParameter = rOOM_ID.HasValue ?
                new ObjectParameter("ROOM_ID", rOOM_ID) :
                new ObjectParameter("ROOM_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<check_room_equipment_Result>("check_room_equipment", pROJECT_IDParameter, eQUIPMENT_IDSParameter, pHASE_IDParameter, dEPARTMENT_IDParameter, rOOM_IDParameter);
        }
    }
}
